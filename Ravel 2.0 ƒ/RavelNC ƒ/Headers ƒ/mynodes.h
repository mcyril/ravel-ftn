typedef struct _filerec {		Str15			fname;	unsigned long	modifdate;	long			flength;	short			points;} filerec;typedef struct _nodelistheader {	char			sign[16];	long			ofs_zones;	long			ofs_nets;	long			ofs_nodes;	long			ofs_points;	} nodelistheader;typedef struct _zonerec  {		unsigned short	zone;	short			fnum;	long			foffset;	long			netoffset;	} zonerec;typedef struct _netrec  {		unsigned short	net;	short			fnum;	long			foffset;	long			nodeoffset;	} netrec;typedef struct _noderec  {		unsigned short	node;	short			flags;//	short			fnum;	long			foffset;	long			pointoffset;	} noderec;typedef struct _pointrec  {		unsigned short	point;	short			fnum;	long			foffset;	} pointrec;/*static Boolean addZone (short zone, long ofs){	p_zonelist	over;	if (!root_zone)	{		root_zone = (p_zonelist) NewPtr (sizeof (zonelist));		if (!root_zone)			return false;				root_zone->zone = zone;		root_zone->offset = ofs;		root_zone->nextzone = NULL;		root_zone->nets = NULL;	}	else	{		over = root_zone;				while (over->nextzone)			over = over->nextzone;				over->nextzone = (p_zonelist) NewPtr (sizeof (zonelist));		if (!over->nextzone)			return false;					over = over->nextzone;		over->zone = zone;		over->offset = ofs;		over->nextzone = NULL;		over->nets = NULL;	}		return true;}typedef struct _pointlist {	short			npoints;		struct {			short		point;		long		offset;	}				one_pnt;} pointlist, *p_pointlist, **h_pointlist;typedef struct _nodelist {	short				node;	long				offset;	struct _nodelist	*nextnode;	h_pointlist			points;} nodelist, *p_nodelist, **h_nodelist;typedef struct _netlist {	short				net;	long				offset;	struct _netlist		*nextnet;	p_nodelist			nodes;} netlist, *p_netlist, **h_netlist;typedef struct _zonelist {	short				zone;	long				offset;	struct _zonelist	*nextzone;//	_regionlist			*regions;			//		???	p_netlist			nets;	} zonelist, *p_zonelist, **h_zonelist;//	static	p_zonelist	root_zone;*/