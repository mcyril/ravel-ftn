#include "PopUpLib.h"#include "PascalStr.h"/*static	short		wdt;pascal void (*oldMenuDefFn)(short msg, MenuHandle whichMenu, Rect *menuRect,		Point hitPt, short *itemID );*//*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//*static pascal void myMenuDefFn(short msg, MenuHandle whichMenu, Rect *menuRect,		Point hitPt, short *itemID ){	oldMenuDefFn ( msg, whichMenu, menuRect, hitPt, itemID );	if ( msg == mSizeMsg )		(*whichMenu)->menuWidth=wdt;}*/PopUpMenuHandle InitPopUp (DialogPtr dialog, short menuID, 							short popID, short InitialValue, StringPtr title, void (*FullMenu) ( PopUpMenuHandle mh )){	PopUpMenuHandle 	mh;	Rect 				itemRect;	short				itemType;	Handle 				itemHdl;			mh = (PopUpMenuHandle) NewHandleClear (sizeof (PopUpMenu));	(**mh).theDialog = dialog;	//	if (menuID > 0)//		(**mh).menuHdl = GetMenu (menuID);//	else		(**mh).menuHdl = NewMenu ( menuID, "\p" );	FullMenu ( mh );		(**mh).popID = popID;	(**mh).menuID = menuID;	pStrCopy (title, (**mh).title);	(**mh).theValue = InitialValue;	GetDialogItem ((**mh).theDialog, (**mh).popID, &itemType, &itemHdl, &itemRect);//	(**(**mh).menuHdl).menuWidth = itemRect.right - itemRect.left;//	(**(**mh).menuHdl).menuProc = GetResource ( 'MDEF', 63 );	InsertMenu ((**mh).menuHdl,-1);	return (mh);}short DisposePopUp (PopUpMenuHandle mh){	DeleteMenu ((**mh).menuID);//	if ((**mh).menuID > 0)//		ReleaseResource((Handle) (**mh).menuHdl);//	else		DisposeMenu ((**mh).menuHdl);		DisposeHandle ((Handle) mh);}short sicn[16] = {	0, 	0, 	0, 	0, 	0, 	0, 	0x3ff8, 	0x1ff0,	0xfe0,	0x7c0,	0x380,	0x100,	0,	0,	0,	0};static void PlotTriangle (Rect *theRect) {	auto BitMap srcBits;	GrafPtr currPort;	GetPort (&currPort); 	srcBits.baseAddr = (Ptr) sicn;	srcBits.rowBytes = 2;	SetRect(&srcBits.bounds, 0, 0, 16, 16);	CopyBits(&srcBits,&(*currPort).portBits,&srcBits.bounds,theRect,srcOr,nil);}void DrawPopUp (PopUpMenuHandle mh){	Rect 		r, rmain, triangle, textbox;	short		itemType, textlen;	Handle 		itemHandle;	Str255		itemName;	Boolean		hilite;	PenState	ps;	FontInfo	fi;	GrafPtr		oldPort;		GetPort ( &oldPort );	SetPort ( (**mh).theDialog );	hilite = !(Boolean)((**((**mh).menuHdl)).enableFlags & 1);	GetDialogItem ((**mh).theDialog, (**mh).popID, &itemType, &itemHandle, &r);	EraseRect (&r); 	rmain = r;//	r.left += 1;	InsetRect (&r, -1, 2);		r.top -= 2;		FrameRect (&r);	MoveTo (r.right, r.top + 2); 	LineTo (r.right, r.bottom);	LineTo (r.left + 2, r.bottom);	InsetRect (&r, 1, 1);	triangle = r;	triangle.left = triangle.right-16;	triangle.bottom = triangle.top+16;	PlotTriangle (&triangle);	GetFontInfo (&fi);	SetRect (&textbox, r.left+13, r.top, triangle.left, r.bottom-fi.descent-1);//	GetItem ((**mh).menuHdl, (**mh).theValue, itemName);	pStrCopy ((**mh).title, itemName);		textlen = textbox.right-textbox.left;	MoveTo (textbox.left, textbox.bottom);	if (StringWidth (itemName) > textlen) {		while (StringWidth (itemName)+StringWidth ("\p╔")>textlen)			itemName[0] -= 1;		DrawString (itemName);		MoveTo (textbox.left+StringWidth(itemName), textbox.bottom);		DrawString ("\p╔");	} else {		DrawString (itemName);	}	if (hilite)	{		GetPenState(&ps);		PenMode (patBic);		PenPat (&qd.ltGray);		InsetRect(&rmain, -1, -1);		rmain.bottom += 1;		PaintRect (&rmain);		SetPenState(&ps);	}	SetPort ( oldPort );}short HandlePopUp (PopUpMenuHandle mh){	short		itemType, numItems, counter; 	Handle 		itemHdl;	Rect 		itemRect;	Point 		popUpLoc;	Boolean 	popUpChoice;	short		markChar, res = false;	//	DebugStr ( "\pPOPA!" );	//	numItems = CountMItems((**mh).menuHdl);	//	for (counter=1;  counter<=numItems; counter++)//		CheckItem ((**mh).menuHdl, counter, false);//	GetItemMark ((**mh).menuHdl, (**mh).theValue, &markChar);//	CheckItem ((**mh).menuHdl, (**mh).theValue, (markChar) ? false : true);	if ((Boolean)((**((**mh).menuHdl)).enableFlags & 1))	{		GetDialogItem ((**mh).theDialog, (**mh).popID, &itemType, &itemHdl, &itemRect);//		wdt = itemRect.right - itemRect.left;//		//		oldMenuDefFn = NULL;//		//		if ( (**((**mh).menuHdl)).menuProc && *(**((**mh).menuHdl)).menuProc )//		{//			(Ptr) oldMenuDefFn = *(**((**mh).menuHdl)).menuProc;//			*(**((**mh).menuHdl)).menuProc = (Ptr) &myMenuDefFn;//		}				popUpLoc.v = itemRect.top;		popUpLoc.h = itemRect.left;				LocalToGlobal(&popUpLoc);				CalcMenuSize ((**mh).menuHdl);		popUpChoice = PopUpMenuSelect ((**mh).menuHdl, popUpLoc.v, popUpLoc.h, (**mh).theValue);//		if (oldMenuDefFn)//			*(**((**mh).menuHdl)).menuProc = (Ptr) oldMenuDefFn;		if (popUpChoice)		{//			CheckItem ((**mh).menuHdl, (**mh).theValue, false);			(**mh).theValue = LoWord (popUpChoice);			GetItemMark ((**mh).menuHdl, (**mh).theValue, &markChar);			CheckItem ((**mh).menuHdl, (**mh).theValue, (markChar) ? false : true);			res = true;		}				DrawPopUp (mh);	}	//	return ((**mh).theValue);	return res;}void HilitePopUp (PopUpMenuHandle mh, Boolean state){	if (state) 		EnableItem ((**mh).menuHdl, 0);	else		DisableItem ((**mh).menuHdl, 0);	DrawPopUp (mh);}