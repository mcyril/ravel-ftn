#ifndef _RAVEL_QUILL_PLUG_H#define _RAVEL_QUILL_PLUG_H#include "ravel_plugins.h"#define	kCurrentQPlugAPI		0x8004#define	plugWelcome				0x00000001L	//	calling when quill started (need filling retCode as mask)#define	plugSuicide				0x00000002L	//	calling when quill terminatig#define	plugStoreMsg			0x00000004L	//	calling when new/edited message is storing in the base#define	plugMsgBodyDone			0x00000008L	//	calling when new/reply message body being prepared from template#define	plugMsgBodyDoneWithTech	0x00000010L	//	calling when new/reply message body being prepared from template with tech info (tearline, origin, etc.)#define	plugMsgBodyAskTearline	0x00000020L#define	plugMsgBodyAskOrigin	0x00000040L#define	plugCustomLaunch		0x00000100L	//	calling when quill perform custom command (plug-in should recognize it)#define	plugCustomNames 		0x00002000L	//	calling for obtaining custom names in plugInvokeNames#define	plugMisc 				0x10000000L	//	general purpose call (retCode contains secondary opcode)#define	plugRetProcessed		0x00000001L	//	#pragma options align=mac68k#define	teCmdGetText			-1#define	teCmdInsertText			-2#define	teCmdClearText			-3#define	teCmdSelectText			-4#define	teCmdScrollToVisible	-5#define	teCmdGetFieldID			-6#define	teCmdGetSelection		-7//	++Implemented in 0x8004#define	msgCmdGetMessage		-10#define	msgCmdGetMessageNum		-11//	--Implemented in 0x8004#define	wIDAreasList			0L#define	wIDMsgView				1L#define	wIDMsgEdit				2L#define	wIDSubjects				3L#define	wIDNodelist				4L#define	wIDAreasSelect			5L#define	wIDFindDlg				6L#define	wIDProgress				7L#define	wIDAddressee			8Ltypedef struct _TECommand {		long			fieldnumber;	long			frompos;	long			topos;		char			*text;	long			textlen;		long			privateInfo;} *TECommand;typedef struct _MSGCommand {	pktmsg			*msg;} *MSGCommand;typedef struct _WinCom {	long			command;	long			result;	union {		TECommand	TEC;		MSGCommand	MSG;	} arg;} WinCom;typedef	WinCom		*WinComPtr;typedef struct _plugsQControlStruct {	long			opCode;					//	Operation code	long			retCode;				//	Result code or acceptable codes mask for plugWelcome											//			union	{			char		plugInvokeName[16];		//	ASCII name for custom call (if plug can plugCustomLaunch)		struct	{			char		**plugInvokeNames;		//	List of invoke names		long		padd[3];			} names;	struct	{			long		stringBuffSize;		long		stringActualSize;		char		*stringBuff;		long		padd[1];	} string;	} misc;		unsigned short	apiRev;					//	API revision (from v1.0fc1): 0x80xx, fc1: xx = 01//	operable information section	pktmsg			*messageIn;				//	Pointer to message for operating//	preferenses information section	plugsPrefs		Preferences;	StringPtr		thisplugPath;			//	path to this plug-in//	call-back routines set//	plug-ins routines	long	(*CallPlugIns) (long opcode, pktmsg *msg, long secondaryOpCode);	long	(*CallNamedPlugIns) (StringPtr name);//	message-base routines	void	(*msgbase_create_unique_name) (StringPtr EchoName, StringPtr BaseName);	short	(*msgbase_open) (short AreaNumber, Boolean needfull);	short	(*msgbase_open_idx) (short AreaNumber, Boolean needfull);	void	(*msgbase_close) (short needupdate);	Boolean	(*msgbase_read_atom) (long msgnum, msgbase_atom *Atom);	Boolean	(*msgbase_write_atom) (long msgnum, msgbase_atom *Atom);	long	(*msgbase_getnummsg) (void);	void	(*msgbase_setnummsg) (long Messages);	long	(*msgbase_getlastread) (void);	void	(*msgbase_setlastread) (long CurrentMsg);	long	(*msgbase_getdirty) (void);	void	(*msgbase_setdirty) (long dirty);	Boolean	(*msgbase_read_message) (long MsgNum, pktmsg **m, short mode);	Boolean	(*msgbase_append_message) (pktmsg *m, Boolean setdirty);	void	(*msgbase_ftn_date) (char *date, DateTimeRec *dtr);	Boolean (*msgbase_scanforme) (long from, Boolean (*myname)(StringPtr));	long	(*msgbase_scanunread) (long Num, short mode);	void	(*msgbase_allread) (void);	void	(*msgbase_prep_reply) (pktmsg *original, pktmsg *destination);	void	(*msgbase_prep_msgid) (pktmsg *destination);	long	(*msgbase_new_msgid) (void);	void	(*msgbase_insert_message) (long msgnum);	void	(*msgbase_delete_message) (long msgnum, long mode);	void	(*FreePktMsg) (pktmsg *p);//	temp-message-base routines	Boolean	(*tmpbase_open) (void);	short	(*tmpbase_add) (pktmsg *m);	void	(*tmpbase_close) (void);//	misc routines	void	(*putlog) (char status, char *loginfo);	short	(*parseaddr) (addr *f, char *s);	long	(*printaddr) (addr *f, char *_ftmp);	//	IN FACT: char*	OSErr	(*FindAProcess) (OSType typeToFind, OSType creatorToFind, ProcessSerialNumberPtr processSN);	void	(*Slice) (void);								//	call Quill's event loop//	nodelist	Boolean	(*GetNodeInfo) (addr *, StringPtr);	Boolean	(*GetNameFromAddr) (addr *, StringPtr);	Boolean	(*GetInfoFromAddr) (addr *address, StringPtr result);	Boolean	(*IsNodelistOK) (void);//	call-back routines set//	apiRev == 0x8003	Boolean	(*PrepareUnlock) ();	void	(*PerformUnlock) ();	void	(*SimulateScanComplete) ();//	GUI will be implemented in 0x8004	long	(*getFrontWindowType) (long *areanumber);	long	(*sendCommandToWindow) (long windowType, long areanumber, WinComPtr WCP);} PlugsQControl, *PlugsQControlPtr;#pragma options align=reset#endif