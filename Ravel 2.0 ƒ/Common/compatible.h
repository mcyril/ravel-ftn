// compatible.h#ifndef _COMPATIBLE#define _COMPATIBLEtypedef struct _ADDRESS{	short	Zone;	short	Net;	short	Node;	short	Point;	char	*Domain;} ADDR;typedef struct s_addrlist {	struct	s_addrlist *next;        /* Linked list next */	ADDR	ad;} ADDR_LIST;typedef struct {    /*     * Same as address...     * I did make it "ADDR Ad"     * but it is too much hassle to change all the references     */    ADDR ad;    /*     * Extra stuff     */    short fakenet;       /* Fakenet for this address [points and nodes] */    char *phone;        /* Phone number of boss (points only) */    struct {        Boolean use4d:1;    /* Use 4D addressing with BOSS */        Boolean usenet:1;   /* Use Fakenet when calling our net */    } flags;} ADDRESS;/* Key structure */typedef struct s_adkey {    struct s_adkey *next;   /* Stored as a singly linked list */    ADDR ad;                /* Address to take action */    /*     * Bits are set for wild cards     * I did consider using special values, e.g. 0 or -1     * within the address but they may be valid numbers!     * This also makes it more general, e.g. 2:ALL/0 is all zone gates     */    struct {        Boolean zone:1;        Boolean net:1;        Boolean node:1;        Boolean point:1;        Boolean domain:1;    } wild;    char *password;     /* Session Password... NULL means none */    char *phone;        /* Phone number... or NULL */    char *prefix;       /* Calling prefix.. e.g. ATB1&G1DT */    ADDRESS *alias;     /* which of our addresses this is... NULL means none */} ADKEY;#define HOLD		0x0001#define DIRECT		0x0002#define CRASH		0x0004#define REQUEST		0x0008#endif