//	ravel_msg_base.h/*	Copyright © 1997 Cyril Moorzin	All rights reserved		Ravel 1.0 PUBLIC DOMAIN part.	Ravel is FTN software for Macintosh	"ravel_msg_base.h" & "ravel_msg_base.c" is Ravel 1.0 Message Base specification*/#ifndef RAVEL_MSGBASE#define RAVEL_MSGBASE#include "ravel_ftn.h"#include "ravel_internal.h"//•	Message base index/header file//	Messagebase headertypedef struct _msgbase_header {	long		base_sign;			//	new base format signature. always 'Rvl1'	long		base_flags;			//	messagebase common flags	long		base_lastread;		//	number of last read message (rudiment)	long		base_dirtstart;		//	number of starting point for scan (-1 - none)	long		base_msg_number;	//	number of messages in base	long		base_atom_number;	//	number of atoms in base (msg + deleted msg)	} msgbase_header;//	Messagebase record (so called atom)typedef struct _msgbase_atom {	long		base_flags;			//	message base related flags	long		offset_header;		//	offset in messages headers file	long		offset_text;		//	offset in messages text file		addr		from;				//	message from address	addr		to;					//	message to address (only in NetMail)	addr		reply;				//	message reply FTN address	long		msgid_crc;			//	CRC of @MSGID's non-FTN address	long		msgid_num;			//	unique ID in @MSGID		long		reply_crc;			//	CRC of @REPLY's non-FTN address	long		reply_num;			//	unique ID in @REPLY	long		flags;				//	FTN	flags set	long		flags_rsv;			//	FTN	flags set (reserved addena)	long		stored_time;		//	time of storing in msgbase	long		msg_reply_prev;		//	prev. message in thread	long		msg_reply_next;		//	next message in thread} msgbase_atom;//	Definition…typedef struct _msgbase_index {	msgbase_header	head;	msgbase_atom	atom[];} msgbase_index, *msgbase_index_p, **msgbase_index_h;//•	Message base messages headers file/*	ASCIIZ strings	+-----------------------+---------------------------------------+	~ from_name				~ FTN fromname field					~	+-----------------------+---------------------------------------+	~ to_name				~ FTN toname field						~	+-----------------------+---------------------------------------+	~ date					~ FTN date field						~	+-----------------------+---------------------------------------+	~ subject				~ FTN subject field						~	+-----------------------+---------------------------------------+	~ msgid					~ @MSGID contents field (excl. kludge)	~	+-----------------------+---------------------------------------+	~ reply					~ @REPLY contents field (excl. kludge)	~	+-----------------------+---------------------------------------+*///•	Message base messages texts filetypedef struct _msgbase_text {	short			text_sign;			//	text storing sign. 'LZ' compressed, 'PL' raw data	long			text_length;		//	length of text (incude term. NUL in 'PL' model)	long			text_len_cmp;		//	length of compressed data	unsigned char	text[];				//	text or compressed data itself.} msgbase_text, *msgbase_text_p;#define	BADAREA		-2#define	NOOPENBASE	-1#define	NETMAIL		0#define	BASE_BUSY			0x00000001L#define	BASE_DIRTY			0x00000002L#define	ATOM_LOCKED			0x00000001L#define	ATOM_DELETED		0x00000002L#define	ATOM_HARDDELETED	0x00000004L#define	ATOM_MSGID			0x00000008L#define	ATOM_REPLY			0x00000010L#define	ATOM_NONFTNMSGID	0x00000020L#define	ATOM_NONFTNREPLY	0x00000040L#define	ATOM_WASREAD		0x00000080L#define	READMODE_ONLY		0x0000#define	READMODE_TEXT		0x0001#define	READMODE_REPLY		0x0002#define	CLOSE_ONLY			0#define	CLOSE_UPDATE		1#define	CLOSE_HEADER		2//•	Prototypesshort	msgbase_init (void);short	msgbase_dispose (void);void	msgbase_create_unique_name (StringPtr EchoName, StringPtr BaseName);short	msgbase_open (short AreaNumber, Boolean needfull);short	msgbase_open_idx (short AreaNumber, Boolean needfull);void	msgbase_close (short needupdate);Boolean	msgbase_read_atom (long msgnum, msgbase_atom *Atom);Boolean	msgbase_write_atom (long msgnum, msgbase_atom *Atom);long	msgbase_getnummsg (void);void	msgbase_setnummsg (long Messages);long	msgbase_getlastread (void);void	msgbase_setlastread (long CurrentMsg);long	msgbase_getdirty (void);void	msgbase_setdirty (long dirty);Boolean	msgbase_read_message (long MsgNum, pktmsg **m, short mode);Boolean	msgbase_append_message (pktmsg *m, Boolean setdirty);void	msgbase_ftn_date (char *date, DateTimeRec *dtr);Boolean msgbase_scanforme (long from, Boolean (*myname)(StringPtr));long	msgbase_scanunread (long Num, short mode);void	msgbase_allread (void);void	msgbase_prep_reply (pktmsg *original, pktmsg *destination);void	msgbase_prep_msgid (pktmsg *destination);long	msgbase_new_msgid (void);void	msgbase_insert_message (long msgnum);void	msgbase_delete_message (long msgnum, long mode);void	msgbase_undelete (void);msgbase_index_h	obtainHBase (void);#endif