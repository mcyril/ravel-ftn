#ifndef THINK_Cstatic	StringPtr	prefFile = "\pRavel.PREF";#endif#include "version.h"//	¥	Pathes#define	PathID		1#define	AppsID		2#define	_homePath	1#define	_tempPath	2#define	_inbdPath	3#define	_outbPath	4#define	_basePath	5#define	_logPath	6//	¥	Resources#define	areasRes		'Area'#define	groupsRes		'Grop'#define	homeRes			'Home'#define	mailRes			'Mail'#define	nodesRes		'Node'#define modeRes			'Mode'#define routeRes		'Rout'//	¥	PrefTypes//	Echo areasÉ Number of resource is AreaNumber 1..ntypedef struct _expItem {	short		Export;	short		Diodes;} ExpItem;typedef struct _oneArea {	Str255		areaName;		// Name of area (must be correct for HFS)	short		group;			// Group number	long		areaflags;		// 32-bits	short		useAKA;			// also SEEN-BY is # of address (0 main, >0 AKA)	short		purger;			// # of days for purge	short		numExports;		// Number of exports	ExpItem		Export[];		// Exports nodes list} areaPrefType, *areaPrefPtr, **areaPrefHndl;#define	AREA_PASSTROUGH		0x00000001L#define	AREA_STRIPSEEN		0x00000004L#define	AREA_COMPRESSED		0x00000030L#define	LINK_DIODE			0x8000//	Echo areas default groupsÉ Number of resource is GroupNumber 0..n-1typedef struct _oneGroup {	Str31		groupName;		// Name of Group (any)	long		areaflags;		// 32-bits	short		useAKA;			// also SEEN-BY is # of address (0 main, >0 AKA)	short		purger;			// # of days	short		numExports;		// Number of exports	ExpItem		Export[];		// Exports nodes list} groupPrefType, *groupPrefPtr, **groupPrefHndl;//	Netmail areasÉ Must be alone #0typedef struct _oneMail {	Str31		mailName;		// Netmail Name	long		areaflags;	short		useAKA;			// also SEEN-BY is # of address (0 main, >0 AKA)	short		purger;			// # of days} mailPrefType, *mailPrefPtr, **mailPrefHndl;typedef struct _home {	Str255		system;	Str255		sysop;	Str255		location;	Str31		phone;	Str31		baud;	Str31		emsi_flags;		daddr		mainAddr;	short		AKAcount;	daddr		AKAAddr[];} homeType, *homePtr, **homeHndl;typedef struct _oneNode {	Str31		nodeName;		// Node Name	addr		Addr;			// Node address	Str31		nodePhone;		// Node phone address	long		evt_mask;		// Operable time	short		yourAka;		// Use your aka with this node	long		nodeflags;		// 32-bits	char		ArcMail_pwd[8];	// ArcMail password	char		AreaFix_pwd[8];	// AreaFix password	char		Session_pwd[8];	// Session password	short		Compressor;		// Compressor number	short		Poll;			// Poll type	short		GroupsNumber;	// Number available groups	short		group[];		// Available list} nodePrefType, *nodePrefPtr, **nodePrefHndl;#define	NODE_NOEMSI				0x00000001L#define	NODE_NOYOOHOO			0x00000002L#define	NODE_NOZEDZAP			0x00000010L#define	NODE_NODIRZAP			0x00000020L#define	NODE_NOJANUS			0x00000040L#define	NODE_NOHYDRA			0x00000080L#define	NODE_NOZEDZIP			0x00000100L#define	NODE_NOSEALINK			0x00000200L#define	NODE_NOXHYDRA			0x00000400L#define	NODE_NOCLASP			0x00000800L#define	NODE_COMPRESSNETMAIL	0x00010000L#define	NODE_ALLOWAUTOCREATE	0x00020000L#define	NODE_ALLOWAREAFIXING	0x00040000Ltypedef struct _route {	addr		mask;	short		node;	} routeType;typedef struct _routing {	short		routes;		routeType	route[];} *routePtr, **routeHndl;typedef struct _preference {	short	disableEMSI;	short	disableWaZOO;	short	auto_scan;	short	auto_toss;	short	baud;	short	stop;	short	parity;	short	data;	short	hanshake;	Str31	port_name;	short	isdcd;} prefType, *prefPtr, **prefHndl;typedef struct _hlines {	struct _hlines	*next;	long			worktime;	Str31			phone;} hiddenlines, *hiddenlinesPtr;typedef struct _tpt_opt {	short		hydra_esc;	short		hydra32;	short		janus32;	short		zmodem32;	char		hydra_uue;	char		hydra_hi8;		char		chat;	unsigned char	timesyncbounds;	short			timesynclink;	short		reserved;} tpt_opt, *p_tpt_opt, **h_tpt_opt;//	¥	Hydra//	#define xHWNT_OPTIONS  ((HOPT_XONXOFF|HOPT_TELENET|HOPT_CTLCHRS|HOPT_HIGHCTL|HOPT_HIGHBIT|HOPT_CANBRK|HOPT_CANASC|HOPT_CANUUE|HOPT_CRC32) & ~(HOPT_CANASC|HOPT_CANUUE|HOPT_CRC32))//	#define xHCAN_OPTIONS  (HOPT_XONXOFF|HOPT_TELENET|HOPT_CTLCHRS|HOPT_HIGHCTL|HOPT_HIGHBIT|HOPT_CANBRK|HOPT_CANASC|HOPT_CANUUE|HOPT_CRC32)	#define xHCAN_OPTIONS  (HOPT_XONXOFF|HOPT_TELENET|HOPT_CTLCHRS|HOPT_HIGHCTL|HOPT_HIGHBIT|HOPT_CANBRK|HOPT_CANASC|HOPT_CANUUE|HOPT_CRC32|HOPT_DEVICE)	#define xHWNT_OPTIONS  0//	¥	Janus	#define xCANCRC32		0x80	#define xCANFREQ 		0x40	#define xCANBINKCHAT 	0x08	#define	xOURCAP			(xCANCRC32 | xCANFREQ | xCANBINKCHAT)//	¥	Zmodem	#define xCANFC32		040Boolean	ReadPreference (void);Boolean	WritePreference (void);