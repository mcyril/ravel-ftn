//	¥	PyTrack.c//	PyTrack's main module//		Python API and test main routine#include "PyTrack.h"#include "py_shuffler_prefs.h"#include "py_ftnaddr.h"#include "py_ftnmask.h"#include "py_ftnmsg.h"#pragma mark ¥ Initialize Shuffler entries#pragma mark -typedef struct {	char		*name;	PyObject	*object;	long		reserved;} PlugEntryDef;static PlugEntryDef shufflerPlugEntries[] = {//		Callback installers		{ "entryWelcome", NULL, 0 },		{ "entrySuicide", NULL, 0 },		{ "entryTossMsgEcho", NULL, 0 },		{ "entryTossMsgEchoExp", NULL, 0 },		{ "entryTossMsgMail", NULL, 0 },		{ "entryTossMsgMailTrs", NULL, 0 },		{ "entryScanMsgEcho", NULL, 0 },		{ "entryScanMsgMail", NULL, 0 },		{ "entryCustomLaunch", NULL, 0 },		{ "entryPreTossLaunch", NULL, 0 },		{ "entryPreScanLaunch", NULL, 0 },		{ "entryPreNetPackLaunch", NULL, 0 },		{ "entryNotify", NULL, 0 },		{ "entryCustomNames", NULL, 0 },		{ "entryMisc", NULL, 0 },		{ "entryCompExtr", NULL, 0 },//		Trailer		{ NULL, NULL }};static PyObject *RSP_FindEntry(char *name, PlugEntryDef *list){	long	i;	for (i = 0; list[i].name; i++)		if (strcmp(name, list[i].name) == 0)			return list[i].object;		return NULL;}static longRSP_FillEntries(PyObject *module, PlugEntryDef *namelist, PlugEntryDef *destlist){	long		i, result = 0;	PyObject	*dict, *func;	dict = PyModule_GetDict(module);	for (i = 0; namelist[i].name; i++)	{        func = PyObject_GetAttrString(module, namelist[i].name);		if (func)			if (PyCallable_Check(func))			{				destlist[i].object = func;				result |= 1 << i;			}	}	if (result & 0x00004000L)		result = (result & ~0x00004000L) | plugMisc;	if (result & 0x00008000L)		result = (result & ~0x00008000L) | plugCompExtr;	return result;}#pragma mark -#pragma mark ¥ Initialize Shuffler utility callbacks#pragma mark -static PyObject *wrap_CallPlugIns(PyObject *self, PyObject *args){	int			result = plugRetNoError;	PyObject	*dict, *module, *func, *rslt;	//	if (!PyArg_ParseTuple(args,"iOi:CallPlugIns",&result))//		return NULL;	return Py_BuildValue("i",result);}static PyObject *wrap_CallNamedPlugIns(PyObject *self, PyObject *args){	int			result = plugRetNoError;	PyObject	*dict, *module, *func, *rslt;	//	if (!PyArg_ParseTuple(args,"s:CallNamedPlugIns",&result))//		return NULL;	return Py_BuildValue("i",result);}static PyObject *wrap_CallArchiverPlugIns(PyObject *self, PyObject *args){	int			result = plugRetNoError;	PyObject	*dict, *module, *func, *rslt;	//	if (!PyArg_ParseTuple(args,"iiiOO:CallArchiverPlugIns",&result))//		return NULL;	return Py_BuildValue("i",result);}#pragma mark -static PyMethodDef shufflerCallbacks[] = {//		Shuffler's API Callbacks         { "CallPlugIns", wrap_CallPlugIns, METH_VARARGS },         { "CallNamedPlugIns", wrap_CallNamedPlugIns, METH_VARARGS },         { "CallArchiverPlugIns", wrap_CallArchiverPlugIns, METH_VARARGS },//		Trailer         { NULL, NULL }};static voidInitShuffler(PyObject *d, PlugsControl *pc){	PyObject *m, *dict;	m = Py_InitModule("shuffler", shufflerCallbacks);	if (m == NULL)		return;	dict = PyModule_GetDict(m);	PyDict_SetItemString(d, "shuffler", m);		m = initftnaddr();	PyDict_SetItemString(d, "ftnaddr", m);	m = initftnmask();	PyDict_SetItemString(d, "ftnmask", m);	m = initftnmsg();	PyDict_SetItemString(d, "ftnmsg", m);	m = PyShufflerPref_Create(pc);	PyDict_SetItemString(dict, "prefs", m);}/*static voidDeInitShuffler(PyObject *d){	PyDict_DelItemString(dict, "prefs");}*/#pragma mark -#pragma mark ¥ PYTRACK_STANDALONE#pragma mark -#if PYTRACK_STANDALONE#include "plug_control_dummy.h"voidmain(){	long answer;	PyObject *modname, *mod, *mdict, *func, *stringarg, *args, *rslt;	//	Py_Initialize();	PyMac_Initialize();//	__path__//	modname = PyString_FromString("PyTrack");//	mod = PyImport_Import(modname);	mod = PyImport_ImportModule("PyTrack");	if (mod)	{		mdict = PyModule_GetDict(mod);		InitShuffler(mdict, create_plug_control());	        func = PyObject_GetAttrString(mod, "first");		if (func)		{			if (PyCallable_Check(func))			{				rslt = PyObject_CallFunction(func, "(s)", "this is a test 0");/*				stringarg = PyString_FromString("this is a test 1");				args = PyTuple_New(1);				PyTuple_SetItem(args, 0, stringarg);				rslt = PyObject_CallObject(func, args);*/				if (rslt)				{					answer = PyInt_AsLong(rslt);					Py_XDECREF(rslt);				}//				else//				{//					rslt = PyErr_Occurred();//					Py_XDECREF(rslt);//				}//				Py_XDECREF(stringarg);//				Py_XDECREF(args);			}		}/*		mdict = PyModule_GetDict(mod);		func = PyDict_GetItemString(mdict, "doit");		if (func)		{			if (PyCallable_Check(func))			{				stringarg = PyString_FromString("this is a test 2");				args = PyTuple_New(1);				PyTuple_SetItem(args, 0, stringarg);				rslt = PyObject_CallObject(func, args);				if (rslt)				{					answer = PyInt_AsLong(rslt);					Py_XDECREF(rslt);				}				Py_XDECREF(stringarg);				Py_XDECREF(args);			}		}*///		PyShufflerPref_Kill();		Py_XDECREF(mod);	}//	Py_XDECREF(modname);//	Py_Finalize();	Py_Exit(0);}#endif