List of custom modules:----------------------	shuffler	ftnaddr	ftnmask	ftnmsg	cfgparserList of imported standard Python modules:----------------------------------------	os	types	time	re 	MacOS	macfsGlobal values-------------	Constants for 'suppress' method:	plugWelcome	plugSuicide	plugTossMsgEcho	plugTossMsgEchoExp	plugTossMsgMail	plugTossMsgMailTrs	plugScanMsgEcho	plugScanMsgMail	plugCustomLaunch	plugPreTossLaunch	plugPreScanLaunch	plugPreNetPackLaunch	plugNotify	plugCustomNames	plugMisc	plugCompExtr	Message FTS attributes (flasg)		MSGPRIVATE		Private message	MSGCRASH		High priority	MSGREAD			Read by addressee	MSGSENT			Has been sent	MSGFILE			File attached to msg	MSGTRANSIT		In transit	MSGORPHAN		Unknown node	MSGKILL			Kill after mailing	MSGLOCAL		Message was entered here	MSGHOLD			Hold for pickup	MSGFREQ			File request	MSGRRREQ		Return receipt request	MSGISRR			Is return receipt	MSGAREQ			Audit request	MSGFUPDREQ		File update request	MSGDIRECT		Direct message	MSGSCN			SCN	MSGKFS			Kill file after sending	MSGCFM			Confirm read msg	Parse kludges modes (for ParseMessage method):	PMODE_TOUCH	PMODE_FORBASE	PMODE_TRANSIT	PMODE_PREPNEW	Return codes:	NOERROR	CONTINUE	DROPMSG	WRONGCALLNAME	FAILEDModule 'shuffler'-----------------The list of attributes:	prefs				PreferencesThe list of specific callbacks that have wrappers for Python:	move			Move file	suppress		Suppress certain callback for curent Python plug	random			Tricky random function	istoken			Test if object is Parser's token	isaddr			Test if object is FTN address	ismask			Test if object is FTN address mask	isstring		Test if object is Python string object	isint			Test if object is Python int object	inwildcard		thest if name matches wildcard				The list of RavelSHUFFLER Plug-In callbacks that have wrappers for Python:Done	Python Func Name	API Func Name---------------------------------------------------------------°		CallPlugIns			CallPlugIns°		CallNamedPlugIns	CallNamedPlugIns°		CallArchiverPlugIns	CallArchiverPlugIns 							ResolveMessageÃ		ExportEchoes		ExportEchoesÃ		RouteMessage		RouteMessage 							CreateFoldersChainÃ		FlavorMessage		FlavorMessageÃ		ParseMessage		parse_kludges°							msgbase_create_unique_name°							msgbase_open°							msgbase_open_idx°							msgbase_close°							msgbase_read_atom°							msgbase_write_atom°							msgbase_getnummsg°							msgbase_setnummsg°							msgbase_getlastread°							msgbase_setlastread°							msgbase_getdirty°							msgbase_setdirty°							msgbase_read_message°							msgbase_append_messageÃ		msgbase_ftn_date	msgbase_ftn_date°							msgbase_scanforme°							msgbase_scanunread°							msgbase_allreadÃ		msgbase_prep_reply	msgbase_prep_replyÃ		msgbase_prep_msgid	msgbase_prep_msgid°							msgbase_new_msgid°							msgbase_insert_message°							msgbase_delete_messageÃ		<del>				FreePktMsg ?							tmpbase_openÃ		TmpBaseAdd			tmpbase_add ?							tmpbase_closeÃ		<print>				putlogÃ		@ftnaddr -> new		parseaddrÃ		@ftnaddr as string	printaddr 							FindAProcessÃ		Slice				Slice 							_Toss 							_Scan 							_NetPack 							_Purge 							_Pack 							_LinkÃ		InitProgress		InitProgressÃ		DrawProgress		DrawProgressÃ		SetStatus			putProgressName°							GetNodeInfo°							GetNameFromAddr°							GetInfoFromAddr°							IsNodelistOK ?							LookForAreaNumber ?							LookForLinkNumberÃ		@ftnaddr -> ==		cmp2addrsÃ		@ftnmsg -> validfor	addrInmaskÃ		IsItMyAddr			IsItMyAddr 							FindRouteTo 							FindRouteToNÃ		StoreMsgSpecial		add_to_otherÃ		msgbase_ftn_date	get_flo_pathname ?							bsy_check ?							bsy_raise ?							bsy_clear ?							base_bsy_check ?							base_bsy_raise ?							base_bsy_clear 							_PurgeNonDstr 							obtainHBase 							_Undel 							Resolver°							UpdatePreference_Links°							UpdatePreference_AreasÃ		ExportEchoesOnlyTo	ExportEchoesOnlyToÃ		@ftnmask -> new		parsemaskÃ		@ftnmsg -> new		ClonePktMsgÃ		@ftnmask as string	printmask---------------------------------------------------------------Comments:	Ã		-	implemented	°		-	will be implemented later				(after allowing to change prefs or when will be required)	 		-	never will be implemented	 ?		-	never will be implemented (maybe)	@name	-	in module "name"	-> name	-	use method "name" of module	<name>	-	standard Python command	as name	-	convert to "name" type for result	==		-	standard Python comparation (as well as !=)