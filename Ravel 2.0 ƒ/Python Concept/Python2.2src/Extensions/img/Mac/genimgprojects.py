import mkcwprojectimport sysimport osimport stringPROJECTDIR = os.path.join(sys.prefix, ":Extensions:img:Mac")MODULEDIRS = [	# Relative to projectdirs	"::",]# Global variable to control forced rebuild (otherwise the project is only rebuilt# when it is changed)FORCEREBUILD=0def relpath(base, path):	"""Turn abs path into path relative to another. Only works for 2 abs paths	both pointing to folders"""	if not os.path.isabs(base) or not os.path.isabs(path):		raise 'Absolute paths only'	if base[-1] == ':':		base = base[:-1]	basefields = string.split(base, os.sep)	pathfields = string.split(path, os.sep)	commonfields = len(os.path.commonprefix((basefields, pathfields)))	basefields = basefields[commonfields:]	pathfields = pathfields[commonfields:]	pathfields = ['']*(len(basefields)+1) + pathfields	rv = string.join(pathfields, os.sep)	return rvdef genimgproject(architecture, module,		project=None, projectdir=None,		sources=[], sourcedirs=[],		libraries=[], extradirs=[],		extraexportsymbols=[]):	if architecture == "all":		# For the time being we generate two project files. Not as nice as		# a single multitarget project, but easier to implement for now.		genimgproject("ppc", module, project, projectdir, sources, sourcedirs,				libraries, extradirs, extraexportsymbols)		genimgproject("carbon", module, project, projectdir, sources, sourcedirs,				libraries, extradirs, extraexportsymbols)		return	templatename = "template-%s" % architecture	targetname = "%s.%s" % (module, architecture)	dllname = "%s.%s.slb" % (module, architecture)	if not project:		if architecture != "ppc":			project = "%s.%s.mcp"%(module, architecture)		else:			project = "%s.mcp"%module	if not projectdir:		projectdir = PROJECTDIR	if not sources:		sources = [module + 'module.c']	if not sourcedirs:		for moduledir in MODULEDIRS:			if '%' in moduledir:				moduledir = moduledir % module			fn = os.path.join(projectdir, os.path.join(moduledir, sources[0]))			if os.path.exists(fn):				moduledir, sourcefile = os.path.split(fn)				sourcedirs = [relpath(projectdir, moduledir)]				sources[0] = sourcefile				break		else:			print "Warning: %s: sourcefile not found: %s"%(module, sources[0])			sourcedirs = []	if architecture == "carbon":		prefixname = "mwerks_carbonplugin_config.h"	else:		prefixname = "mwerks_plugin_config.h"	dict = {		"sysprefix" : relpath(projectdir, sys.prefix),		"sources" : sources,		"extrasearchdirs" : sourcedirs + extradirs,		"libraries": libraries,		"mac_outputdir" : ":",		"extraexportsymbols" : extraexportsymbols,		"mac_targetname" : targetname,		"mac_dllname" : dllname,		"prefixname" : prefixname,	}	mkcwproject.mkproject(os.path.join(projectdir, project), module, dict,			force=FORCEREBUILD, templatename=templatename)def	genallprojects(force=0):	global FORCEREBUILD	FORCEREBUILD = force	genimgproject("all", "imgformat")	genimgproject("all", "imgcolormap",		sources=["imgcolormapmodule.c", "dither.c", "mppm3.c", "genmap.c"],		libraries=["pbm.ppc.Lib"],		extradirs=[":::::imglibs:netpbm:*"])	genimgproject("all", "imgop")	genimgproject("all", "imgpbm",		libraries=["pbm.ppc.Lib"],		extradirs=[":::::imglibs:netpbm:*"])	genimgproject("all", "imgpgm",		libraries=["pbm.ppc.Lib"],		extradirs=[":::::imglibs:netpbm:*"])	genimgproject("all", "imgppm",		libraries=["pbm.ppc.Lib"],		extradirs=[":::::imglibs:netpbm:*"])	genimgproject("all", "imggif")	genimgproject("all", "imgtiff",		sources=["imgtiffmodule.c", "tif_stdio.c"],		libraries=["tiff.gusi.ppc.Lib"],		extradirs=[":::::imglibs:netpbm:libtiff:*"])	genimgproject("all", "imgjpeg",		libraries=["jpeg.ppc.Lib"],		extradirs=[":::::imglibs:jpeg:*"])	genimgproject("all", "imgpng",		libraries=["png.ppc.Lib", "zlib.ppc.Lib"],		extradirs=[":::::imglibs:libpng:*", ":::::imglibs:zlib:*"])	genimgproject("all", "imgsgi")if __name__ == '__main__':	genallprojects()	