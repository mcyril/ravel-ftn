#define LDEF_PopStub		1025typedef enum {	kPopListNotInList = 0,			/* The click was not in this list		*/	kPopListNoClick,				/* User changed mind					*/	kPopListClick,					/* Single-click on list datum			*/	kPopListDoubleClick,			/* Double-click on list datum			*/	kPopListClickPopUp				/* Click on list's pop-up			*/} PopListClickState;/* *	kHasPopUp			This item has pop-up gadget. */#define	kHasPopUp			0x0100				/* This item has pop-up			*/	struct PopListRecord {	unsigned short		flag;					/* PopListFlags				*/	unsigned short		dataLength;				/* Length of actual datum		*/	unsigned char		data[1];				/* Datum to display				*/};typedef struct PopListRecord	PopListRecord, *PopListPtr, **PopListHdl;typedef pascal void		(*PopListDrawProc)(		ListHandle			ListHdl,			/* The list itself				*/		const Ptr			dataPtr,			/* -> user data in record		*/		unsigned short		dataLength,			/* length of user datum			*/		const Rect			*viewRect,			/* Draw in this area			*/		short				listMessage	);struct PopListPvtRecord {	PopListDrawProc		drawProc;	};typedef struct PopListPvtRecord	PopListPvtRecord, *PopListPvtPtr, **PopListPvtHdl;ListHandle NewPopList (		const Rect					*viewRect,		const Point					*cellsize,		PopListDrawProc				drawProc,		char						listFlags	);void DisposePopList (ListHandle list);PopListClickState PopListClick(		ListHandle					theList,		const EventRecord			*eventRecordPtr,		Cell						*selectedListCell	);void PopListSetCell (Ptr dataPtr, short dataLen, Cell theCell, ListHandle lHandle, Boolean PopList);void PopListGetCell (Ptr dataPtr, short *dataLen, Cell theCell, ListHandle lHandle);void PopListDelCell (Cell theCell, ListHandle lHandle);