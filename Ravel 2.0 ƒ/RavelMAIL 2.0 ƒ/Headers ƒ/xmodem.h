/* File transfer structures */typedef struct{#if 0   unsigned char header;#endif   unsigned char block_num;   unsigned char block_num_comp;   unsigned char data_bytes[128];   unsigned char data_check[2];} XMDATA, *XMDATAP;typedef struct{#if 0   unsigned char header;#endif   unsigned char block_num;   unsigned char block_num_comp;   unsigned char filelength[4];          /* Low comes first */   unsigned char time[2];                /* MSDOS format */   unsigned char date[2];                /* MSDOS format */   char filename[16];   char nullbyte;   char sendingprog[15];   char noacks;   unsigned char crcmode;   char fill[86];   unsigned char data_check[2];} TLDATA, *TLDATAP;typedef struct{#if 0   unsigned char header;#endif   unsigned char block_num;   unsigned char block_num_comp;   unsigned char filelength[4];   unsigned char time[2];    /* 0..4: seconds/2, 5..10: minutes, 11..15: hours */   unsigned char date[2];    /* 0..4: days, 5..8: month, 9..15: year-1980      */   char filename[17];   char sendingprog[15];   char SLO;   char Resync;   char MACFLOW;   char fill[85];   unsigned char data_check[2];} SEADATA, *SEADATAP;typedef struct {   unsigned short SEAlink:1; /* Can do SEAlink */   unsigned short SLO:1;     /* Can do SEAlink with Overdrive */   unsigned short Resync:1;  /* Can do SEAlink with Resync */   unsigned short MacFlow:1; /* Can do SEAlink with Macintosh flow control */   unsigned short do_CRC:1;  /* Should do CRC instead of checksum */   unsigned short TeLink:1;  /* We saw a TeLink header */} TRANS, *TRANSP;/*typedef struct {   const char *state_name;   short cdecl (*state_func)();} STATES, *STATEP;*/typedef struct {   TRANS options;    /* Transfer options */   short result;       /* Result from last operation */   short sub_results;  /* Extra result codes */   long T1;          /* General purpose timer */   long T2;          /* General purpose timer */   short Window;       /* SEAlink window size */   long SendBLK;     /* Current block to be sent */   long NextBLK;     /* Next block we will try to send */   long ACKBLK;      /* Block that was last ACK'd */   long LastBlk;     /* Last block in file */   long ARBLK;       /* Used in ACK Check calculations */   long WriteBLK;    /* Block number to write to file */   long filelen;     /* Length of file being sent */   long curr_byte;   /* Current unsigned char offset of sending or receiving */   long prev_bytes;  /* Bytes that we are resyncing over */   long total_blocks;/* Total number of blocks in file to be received */   long resync_block;/* Block number we received to resync to */   short NumNAK;       /* Number of NAK's received this block */   short ACKsRcvd;     /* Number of ACK's received since file start */   short ACKST;        /* Current state of the ack/nak state variable */   short tries;        /* Number of tries thus far */   short goodfile;     /* 0 if file was bad, 1 if file was good */   size_t datalen;   /* Length of data in this block */   short recblock;     /* Block number received */   short sent_ACK;     /* Whether or not we sent an ACK already */   short tot_errs;     /* Total number of errors */   unsigned char ARBLK8;   /* 8 bit value of ARBLK */   unsigned char blocknum; /* 8 bit value of SendBLK */   unsigned char check;    /* checksum value */   unsigned char save_header; /* Received header from first block */   short CHR;                /* General purpose receive character */   union                   /* File date and time in Telink or SEAlink format */   {   struct      {      unsigned time;      unsigned date;      } twowords;   struct      {      unsigned long timedate;      } oneword;   } save_filetime;   char received_name[20]; /* Received filename from Telink or SEAlink */   char m7name[12];        /* Filename in Modem7 format */   char *filename;         /* The filename to be sent or received */   char *path;             /* Just the path to the file to be sent/received */   char *fptr;             /* Pointer into character fields */   char *temp_name;        /* Temporary name for receiving */   short file_pointer;     /* The pointer for read/write/seek operations */   unsigned char header;   XMDATA datablock;#if 0   unsigned char header;   unsigned char block_num;   unsigned char block_num_comp;   unsigned char data[128];   unsigned char data_check[2];#endif} XMARGS, *XMARGSP;#define DID_RESYNC 1typedef struct {   short tries;   size_t barklen;   short barkok;   long T1;   short nfiles;   char *inbound;   char *filename;   char barkpacket[128];   char *barkpw;   char *barktime;} BARKARGS, *BARKARGSP;#define XS0 2#define XS0T 3#define XS1 4#define XS2 5#define XS3 6#define MS0 2#define MS1 3#define MS2 4#define S0 1#define S1 2#define S2 3#define S3 4#define S4 5#define S5 6#define S6 7#define S7 8#define S8 9#define XR0 2#define XR0B 3#define XR1 4#define XR2 5#define XR3 6#define XR4 7#define XR5 8#define MR0 2#define MR1 3#define MR2 4#define MR3 5#define R0 1#define R1 2#define R2 3#define R3 4#define R4 5#define R5 6#define R6 7#define R7 8#define BS0 2#define BS1 3#define BS2 4#define BS3 5#define BS4 6#define BR0 2#define BR1 3#define BR2 4#define BR3 5#define BR4 6#define W0 1#define W1 2#define W2 3#define W3 4#define W4 5#define W5 6#define SR0 1#define SR1 2#define SR2 3#define AC0 2#define AC1 3#define AC2 4#define AC3 5#define AC4 6#define AC5 7#define AC6 8#define AC7 9#define AC8 10#define AC9 11#define AC10 12#define SB0 2#define SB1 3#define SB2 4#define SB3 5#define RB0 2#define RB1 3#define RB2 4#define RB3 5#define RB4 6#define SA0 2#define SA1 3#define SA2 4#define SA3 5#define SN0 2#define SN1 3#define SN2 4#define SN3 5#define SUCCESS 0#define SUCCESS_EOT -1#define OPEN_ERR -1#define GETBLOCK_ERR -2#define SENDBLOCK_ERR -3#define SEND_TIMEOUT -4#define END_OF_FILE -5#define SEND_RETRY_ERR -6#define SYSTEM_ERR -7#define DATA_STREAM_ERR -8#define CARRIER_ERR -9#define FNAME_ERR -10#define BUSY_ERR -11#define BAD_LINE_ERR -12#define VOICE_ERR -13#define DIAL_TONE_ERR -14#define MODEM_ERR -15#define TIME_ERR -16#define WHACK_CR_ERR -17#define XMODEM_ERR -18#define SENDFILE_ERR -19#define STREAM_ERR -20#define XMODEM_REC_ERR -21#define NO_CR_ERR -22#define EOT_RECEIVED -23#define STAT_ERR -24#define START_TIMEOUT -25#define NO_CARRIER_ERR -26#define CONN_COUNT_ERR -27#define NO_CONN_COUNT_ERR -28#define NO_CALL -29#define READ_ERR -30#define OUR_MSG_ERR -31#define MSG_SENT_ERR -32#define MLO_ERR -33#define PICKUP_DONE -34#define DEV_ERR -35#define KBD_ERR -36#define CRC_ERR -37#define RESYNC_ERR -38#define TOO_MANY_ERRORS -39#define EOT_BLOCK 1#define TELINK_BLOCK 2#define DATA_BLOCK 3#define XMODEM_BLOCK 3#define BAD_BLOCK 4#define SHORT_BLOCK 5#define DUP_BLOCK 6#define SEALINK_BLOCK 7#define NO_BLOCK 10#define CHECKSUM 0#define CRC 1#define WANTCRC 'C'short	SEAlink_Send_File (char *filename, char *sendname);short	Telink_Send_File (char *filename, char *sendname);short	Xmodem_Send_File (char *filename, char *sendname);short	Xmodem_Receive_File (char *path, char *filename);short	Batch_Xmodem_Receive_File (char *path, char *filename);short	SEA_recvreq ();void	SEA_sendreq ();short	Batch_Send (char *);short	Batch_Receive (char *);short	Modem7_Receive_File (char *filename);short	Modem7_Send_File (char *filename);void Data_Check (XMDATAP xtmp, short mode);