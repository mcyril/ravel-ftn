/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//*е                                                                                  е*//*е  File:      PKT.h                                                                е*//*е                                                                                  е*//*е  Author:    "Wicked" Cyril Morzin                                                е*//*е  Subject:   Ravel package common data's structures.                              е*//*е  Purpose:   Supported by RavelSHUFFLER, RavelQUILL & RavelMAIL appls.            е*//*е                                                                                  е*//*е  Created:   before 15.07.1996 (internal structs was based on qEcho sources)      е*//*е  Revisions:                                                                      е*//*е      15.07.1996 - making revise all data structures by my own understanding.     е*//*е                                                                                  е*//*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//***  FTS-1 (FSC-39 compliant) packet definition used by FrontDoor, TosScan,**  and FrontDoor APX among other products to create .PKT files.*/#define CW_2PLUS        0x0001                 /*Support for Type 2+ bundles*/#define CW_N2PLUS       0x0100                     /*Validation for CW_2PLUS*/#define PKTVERSION      2                    /*Current packet revision level*/    /* Packet header, one per packet */typedef struct    {    unsigned short int  OrigNode,                         /*Originating node*/	// + 00                        DestNode,                         /*Destination node*/	// + 02                        Year,                     /*Year created (1993-nnnn)*/	// + 04                        Month,                        /*Month created (0-11)*/	// + 06                        Day,                            /*Day created (1-31)*/	// + 08                        Hour,                          /*Hour created (0-23)*/	// + 0A                        Minute,                      /*Minute created (0-59)*/	// + 0C                        Second,                      /*Second created (0-59)*/	// + 0E                        Rate,                            /*Baudrate (unused)*/	// + 10                        Version,                        /*Packet version (2)*/	// + 12                        OrigNet,                           /*Originating net*/	// + 14                        DestNet;                           /*Destination net*/	// + 16    unsigned char       PCodeLo,                  /*Product code (low-order)*/	// + 18                        PRevMajor,                           /*Major version*/	// + 19                        Password[8];          /*Packet password (not ASCIIZ)*/	// + 1A    unsigned short int  QMOrigZone,               /*Originating zone (QMail)*/	// + 22                        QMDestZone,               /*Destination zone (QMail)*/	// + 24                        AuxNet,                     /*Auxillary net (unused)*/	// + 26                        CWValidate;                     /*CapWord validation*/	// + 28    unsigned char       PCodeHi,                 /*Product code (high-order)*/	// + 2A                        PRevMinor;                           /*Minor version*/	// + 2B    unsigned short int  CWCapWord,                            /*Capabilities*/	// + 2C                        OrigZone,                /*Originating zone (FSC-39)*/	// + 2E                        DestZone,                /*Destination zone (FSC-39)*/	// + 30                        OrigPoint,              /*Originating point (FSC-39)*/	// + 32                        DestPoint;              /*Destination point (FSC-39)*/	// + 34    unsigned long       LongData;            /*Product dependent information*/	// + 36    }																			//   38    FTS1PKTHDR;    /* Packed message, none or more per packet */typedef struct    {    unsigned short int  Version,                        /*Packet version (2)*/	// + 00                        OrigNode,                         /*Originating node*/	// + 02                        DestNode,                         /*Destination node*/	// + 04                        OrigNet,                           /*Originating net*/	// + 06                        DestNet,                           /*Destination net*/	// + 08                        Attr,                                  /*FTS1 status*/	// + 0A                        Cost;                              /*Cost of message*/	// + 0C                        														//   0E    /*    **    The message header follows this but is of variable length ASCIIZ    **    strings in the order:  	  						AsciiDate,  						ToUser,  						FromUser,  						Subject,  						MsgText.      	*/    }    FTS1PKTMSG;/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//***	Maximum field length in packet's message*/#define	MDate			20#define	MName			36#define	MSubject		72/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/#define MSGPRIVATE      0x0001                             /*Private message*/#define MSGCRASH        0x0002                               /*High priority*/#define MSGREAD         0x0004                           /*Read by addressee*/#define MSGSENT         0x0008                               /*Has been sent*/#define MSGFILE         0x0010                        /*File attached to msg*/#define MSGTRANSIT      0x0020                                  /*In transit*/#define MSGORPHAN       0x0040                                /*Unknown node*/#define MSGKILL         0x0080                          /*Kill after mailing*/#define MSGLOCAL        0x0100                    /*Message was entered here*/#define MSGHOLD         0x0200                             /*Hold for pickup*/#define MSGUNUSED       0x0400                                          /*!!*/#define MSGFREQ         0x0800                                /*File request*/#define MSGRRREQ        0x1000                   /*Return receipt request !!*/#define MSGISRR         0x2000                        /*Is return receipt !!*/#define MSGAREQ         0x4000                            /*Audit request !!*/#define MSGFUPDREQ      0x8000                      /*File update request !!*/    /* Message header, one per message */typedef struct    {    char    FromUser[MName],                             /*Name in By: field*/            ToUser[MName],                               /*Name in To: field*/            Subject[MSubject],                           /*Name in Re: field*/            Date[MDate];                              /*ASCIIz creation date*/    unsigned short            TimesRead,                        /*Number of times message read*/            DestNode,                                     /*Destination node*/            OrigNode,                                     /*Originating node*/            Cost,                                     /*Cost to send message*/            OrigNet,                                       /*Originating net*/            DestNet;                                       /*Destination net*/    unsigned long            DateWritten,                          /*Date message was written*/            DateArrived;                        /*Date message was read/sent*/    unsigned short            ReplyTo,                          /*This is a reply to "ReplyTo"*/            Attr,                                /*Attribute bits, see above*/            ReplyNext;                                /*Next reply in thread*/    /*    **    The message follows this but is of variable length ASCIIZ    **    string:			MsgText.      	*/    }    FIDOMSG;/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/	//	еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее	//	е																е	//	е				   Internal Ravel structures					е	//	е																е	//	еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*///	е Addresses note: if net is undefined (==0) address is emptytypedef struct								/* Internal net address storage structure */	{	short				zone,						net,						node,						point;	}	addr;typedef struct								/* Internal net address storage structure with domain */	{	addr				ad;	Str31				domain;	}	daddr;/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/typedef struct								/* Internal packet storage structure */	{	addr				from,						to;	short				auxnet;	short				pkttype;	short				year,				/* Packet creation date */						month,						day,						hour,						min,						sec;	short				productCode;		/* Product's code */	short				productRev;			/* Product's version/revision */	char				passwd[9];	}	pktheader;/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/typedef struct								/* Internal storage structure of path and seen-by */	{	short				**nets;	short				**nodes;	short				items;	}	juncted;//	е Messages note: if area is undefined (area[0]==0) it is netmailtypedef struct								/* Internal storage of message structure */	{	addr				from,				/* from address */						to,					/* to address */						reply;				/* reply address */							char				fromname[MName],						toname[MName];	char				date[MDate],						subj[MSubject];	long				flags;	char				**text;	char				area[MName];	long				msgid;	long				replyid;	juncted				seenby,						path;	}	pktmsg;/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/	//	еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее	//	е																е	//	е				     Ravel's base structures					е	//	е																е	//	еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*///	е	Base header descriptortypedef struct _baseIndexHeader {	short			busy;				// reaserved	unsigned char	AreaName[MName];	// name of area ("NETMAIL" == netmail, not empty!)	long			CRCIndex;			// reserved	long			CRCText;			// reserved	long			lastRead;			// number of last read	long			NumberOfMessages;	// number of messages/*	indexAtomType	indexAtom[NumberOfMessages];*/} baseIndexHeaderType;typedef struct _indexAtom {	short			deleted;			// message is deleted - can purge :)	long			textOffset;			// intext offset from start of file	long			textLength;			// length of text (include null term)		char			fromname[MName],					toname[MName];	char			date[MDate],					subj[MSubject];	addr			from,				// addresses					to,					//  +++ to field is actually for NetMail only					reply;						long			msgID;				// MSGID unical number copy	long			repID;				// REPLY unical number copy	long			flags;	long			BaseReplyTo,		// number of message that was origin for reply					BaseNextReply;		// next reply in base number} indexAtomType, *indexAtomPtr;	#define	BADAREA		-2	#define	NOOPENBASE	-1	#define	NETMAIL		0//	#define	OTHERSBASE	>0/*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*//*ееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее*/